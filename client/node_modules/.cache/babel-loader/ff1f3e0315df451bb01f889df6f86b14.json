{"ast":null,"code":"import _slicedToArray from\"C:/Users/eldan/Assignments/Homework/Scratch_Work/pracPro/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function Contact(){// Create state variables for the fields in the form\n// We are also setting their initial values to an empty string\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),email=_useState2[0],setEmail=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),name=_useState4[0],setName=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),errorMessage=_useState8[0],setErrorMessage=_useState8[1];var handleInputChange=function handleInputChange(e){// Getting the value and name of the input which triggered the change\nvar target=e.target;var inputType=target.name;var inputValue=target.value;// Based on the input type, we set the state of either email, username, and password\nif(inputType==='email'){setEmail(inputValue);}else if(inputType==='name'){setName(inputValue);}else{setMessage(inputValue);}};var handleFormSubmit=function handleFormSubmit(e){// Preventing the default behavior of the form submit (which is to refresh the page)\ne.preventDefault();// If everything goes according to plan, we want to clear out the input after a successful registration.\nsetName('');setMessage('');setEmail('');};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"If you have any questions or just want to connect, you can fill this form or use the links down below! Thank you!\"}),/*#__PURE__*/_jsxs(\"form\",{className:\"flex-row justify-center justify-space-between-md align-center\",children:[/*#__PURE__*/_jsx(\"input\",{value:name,className:\"form-input w-100\",name:\"name\",onChange:handleInputChange,type:\"text\",placeholder:\"name\"}),/*#__PURE__*/_jsx(\"input\",{value:email,className:\"form-input w-100\",name:\"email\",onChange:handleInputChange,type:\"email\",placeholder:\"email\"}),/*#__PURE__*/_jsx(\"input\",{value:message,className:\"form-input w-100\",name:\"message\",onChange:handleInputChange,type:\"message\",placeholder:\"message\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-primary btn-block py-3\",type:\"button\",onClick:handleFormSubmit,children:\"Submit\"})]}),errorMessage&&/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"p\",{className:\"error-text\",children:errorMessage})})]});}","map":{"version":3,"sources":["C:/Users/eldan/Assignments/Homework/Scratch_Work/pracPro/src/components/pages/Contact.js"],"names":["React","useState","Contact","email","setEmail","name","setName","message","setMessage","errorMessage","setErrorMessage","handleInputChange","e","target","inputType","inputValue","value","handleFormSubmit","preventDefault"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,C,wFAGA,cAAe,SAASC,CAAAA,OAAT,EAAmB,CAChC;AACA;AACA,cAA0BD,QAAQ,CAAC,EAAD,CAAlC,wCAAOE,KAAP,eAAcC,QAAd,eACA,eAAwBH,QAAQ,CAAC,EAAD,CAAhC,yCAAOI,IAAP,eAAaC,OAAb,eACA,eAA8BL,QAAQ,CAAC,EAAD,CAAtC,yCAAOM,OAAP,eAAgBC,UAAhB,eACA,eAAwCP,QAAQ,CAAC,EAAD,CAAhD,yCAAOQ,YAAP,eAAqBC,eAArB,eAEA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,CAAD,CAAO,CAC/B;AACA,GAAQC,CAAAA,MAAR,CAAmBD,CAAnB,CAAQC,MAAR,CACA,GAAMC,CAAAA,SAAS,CAAGD,MAAM,CAACR,IAAzB,CACA,GAAMU,CAAAA,UAAU,CAAGF,MAAM,CAACG,KAA1B,CAEA;AACA,GAAIF,SAAS,GAAK,OAAlB,CAA2B,CACzBV,QAAQ,CAACW,UAAD,CAAR,CACD,CAFD,IAEO,IAAID,SAAS,GAAK,MAAlB,CAA0B,CAC/BR,OAAO,CAACS,UAAD,CAAP,CACD,CAFM,IAEA,CACLP,UAAU,CAACO,UAAD,CAAV,CACD,CACF,CAdD,CAgBA,GAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACL,CAAD,CAAO,CAC9B;AACAA,CAAC,CAACM,cAAF,GACA;AACAZ,OAAO,CAAC,EAAD,CAAP,CACAE,UAAU,CAAC,EAAD,CAAV,CACAJ,QAAQ,CAAC,EAAD,CAAR,CACD,CAPD,CASA,mBACE,oCACE,wIADF,cAEE,cAAM,SAAS,CAAC,+DAAhB,wBACE,cACE,KAAK,CAAEC,IADT,CAEE,SAAS,CAAC,kBAFZ,CAGE,IAAI,CAAC,MAHP,CAIE,QAAQ,CAAEM,iBAJZ,CAKE,IAAI,CAAC,MALP,CAME,WAAW,CAAC,MANd,EADF,cASE,cACE,KAAK,CAAER,KADT,CAEE,SAAS,CAAC,kBAFZ,CAGE,IAAI,CAAC,OAHP,CAIE,QAAQ,CAAEQ,iBAJZ,CAKE,IAAI,CAAC,OALP,CAME,WAAW,CAAC,OANd,EATF,cAiBE,cACE,KAAK,CAAEJ,OADT,CAEE,SAAS,CAAC,kBAFZ,CAGE,IAAI,CAAC,SAHP,CAIE,QAAQ,CAAEI,iBAJZ,CAKE,IAAI,CAAC,SALP,CAME,WAAW,CAAC,SANd,EAjBF,cAyBE,eAAQ,SAAS,CAAC,gCAAlB,CAAmD,IAAI,CAAC,QAAxD,CAAiE,OAAO,CAAEM,gBAA1E,oBAzBF,GAFF,CA6BGR,YAAY,eACX,kCACE,UAAG,SAAS,CAAC,YAAb,UAA2BA,YAA3B,EADF,EA9BJ,GADF,CAqCD","sourcesContent":["import React, { useState } from 'react';\n\n\nexport default function Contact() {\n  // Create state variables for the fields in the form\n  // We are also setting their initial values to an empty string\n  const [email, setEmail] = useState('');\n  const [name, setName] = useState('');\n  const [message, setMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleInputChange = (e) => {\n    // Getting the value and name of the input which triggered the change\n    const { target } = e;\n    const inputType = target.name;\n    const inputValue = target.value;\n\n    // Based on the input type, we set the state of either email, username, and password\n    if (inputType === 'email') {\n      setEmail(inputValue);\n    } else if (inputType === 'name') {\n      setName(inputValue);\n    } else {\n      setMessage(inputValue);\n    }\n  };\n\n  const handleFormSubmit = (e) => {\n    // Preventing the default behavior of the form submit (which is to refresh the page)\n    e.preventDefault();\n    // If everything goes according to plan, we want to clear out the input after a successful registration.\n    setName('');\n    setMessage('');\n    setEmail('');\n  };\n\n  return (\n    <div>\n      <p>If you have any questions or just want to connect, you can fill this form or use the links down below! Thank you!</p>\n      <form className=\"flex-row justify-center justify-space-between-md align-center\">\n        <input\n          value={name}\n          className=\"form-input w-100\"\n          name=\"name\"\n          onChange={handleInputChange}\n          type=\"text\"\n          placeholder=\"name\"\n        />\n        <input\n          value={email}\n          className=\"form-input w-100\"\n          name=\"email\"\n          onChange={handleInputChange}\n          type=\"email\"\n          placeholder=\"email\"\n        />\n        <input\n          value={message}\n          className=\"form-input w-100\"\n          name=\"message\"\n          onChange={handleInputChange}\n          type=\"message\"\n          placeholder=\"message\"\n        />\n        <button className=\"btn btn-primary btn-block py-3\" type=\"button\" onClick={handleFormSubmit}>Submit</button>\n      </form>\n      {errorMessage && (\n        <div>\n          <p className=\"error-text\">{errorMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}