{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eldan\\\\Assignments\\\\Homework\\\\Scratch_Work\\\\pracPro\\\\src\\\\components\\\\BucketList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction BucketList() {\n  _s();\n\n  const [bucket, setBucket] = useState([]); // Function to add a bucket list item\n\n  const addBucketItem = item => {\n    console.log('ðŸš€ ~ file: BucketList.js ~ line 10 ~ addBucketItem ~ item', item); // Check to see if the item text is empty\n\n    if (!item.text) {\n      return;\n    } // Add the new bucket list item to the existing array of objects\n\n\n    const newBucket = [item, ...bucket];\n    console.log(newBucket); // Call setBucket to update state with our new set of bucket list items\n\n    setBucket(newBucket);\n  }; // Function to mark bucket list item as complete\n\n\n  const completeBucketItem = id => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map(item => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n\n      return item;\n    });\n    console.log(updatedBucket);\n    setBucket(updatedBucket);\n  }; // Function to remove bucket list item and update state\n\n\n  const removeBucketItem = id => {\n    const updatedBucket = [...bucket].filter(item => item.id !== id);\n    setBucket(updatedBucket);\n  }; // Function to edit the bucket list item\n\n\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    } // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n\n\n    setBucket(prev => prev.map(item => item.id === itemId ? newValue : item));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"What is on your bucket list?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BucketForm, {\n      onSubmit: addBucketItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Bucket, {\n      bucket: bucket,\n      completeBucketItem: completeBucketItem,\n      removeBucketItem: removeBucketItem,\n      editBucketItem: editBucketItem\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BucketList, \"v9pnzffudb0EPv26TAOFWvRojGo=\");\n\n_c = BucketList;\nexport default BucketList;\n\nvar _c;\n\n$RefreshReg$(_c, \"BucketList\");","map":{"version":3,"sources":["C:/Users/eldan/Assignments/Homework/Scratch_Work/pracPro/src/components/BucketList.js"],"names":["React","useState","BucketForm","Bucket","BucketList","bucket","setBucket","addBucketItem","item","console","log","text","newBucket","completeBucketItem","id","updatedBucket","map","isComplete","removeBucketItem","filter","editBucketItem","itemId","newValue","prev"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AACpB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC,CADoB,CAGpB;;AACA,QAAMM,aAAa,GAAIC,IAAD,IAAU;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CACE,2DADF,EAEEF,IAFF,EAD8B,CAK9B;;AACA,QAAI,CAACA,IAAI,CAACG,IAAV,EAAgB;AACd;AACD,KAR6B,CAU9B;;;AACA,UAAMC,SAAS,GAAG,CAACJ,IAAD,EAAO,GAAGH,MAAV,CAAlB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYE,SAAZ,EAZ8B,CAc9B;;AACAN,IAAAA,SAAS,CAACM,SAAD,CAAT;AACD,GAhBD,CAJoB,CAsBpB;;;AACA,QAAMC,kBAAkB,GAAIC,EAAD,IAAQ;AACjC;AACA,QAAIC,aAAa,GAAGV,MAAM,CAACW,GAAP,CAAYR,IAAD,IAAU;AACvC,UAAIA,IAAI,CAACM,EAAL,KAAYA,EAAhB,EAAoB;AAClBN,QAAAA,IAAI,CAACS,UAAL,GAAkB,CAACT,IAAI,CAACS,UAAxB;AACD;;AACD,aAAOT,IAAP;AACD,KALmB,CAApB;AAOAC,IAAAA,OAAO,CAACC,GAAR,CAAYK,aAAZ;AACAT,IAAAA,SAAS,CAACS,aAAD,CAAT;AACD,GAXD,CAvBoB,CAoCpB;;;AACA,QAAMG,gBAAgB,GAAIJ,EAAD,IAAQ;AAC/B,UAAMC,aAAa,GAAG,CAAC,GAAGV,MAAJ,EAAYc,MAAZ,CAAoBX,IAAD,IAAUA,IAAI,CAACM,EAAL,KAAYA,EAAzC,CAAtB;AAEAR,IAAAA,SAAS,CAACS,aAAD,CAAT;AACD,GAJD,CArCoB,CA2CpB;;;AACA,QAAMK,cAAc,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AAC3C;AACA,QAAI,CAACA,QAAQ,CAACX,IAAd,EAAoB;AAClB;AACD,KAJ0C,CAM3C;AACA;;;AACAL,IAAAA,SAAS,CAAEiB,IAAD,IACRA,IAAI,CAACP,GAAL,CAAUR,IAAD,IAAWA,IAAI,CAACM,EAAL,KAAYO,MAAZ,GAAqBC,QAArB,GAAgCd,IAApD,CADO,CAAT;AAGD,GAXD;;AAaA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,UAAD;AAAY,MAAA,QAAQ,EAAED;AAAtB;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AACE,MAAA,MAAM,EAAEF,MADV;AAEE,MAAA,kBAAkB,EAAEQ,kBAFtB;AAGE,MAAA,gBAAgB,EAAEK,gBAHpB;AAIE,MAAA,cAAc,EAAEE;AAJlB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GArEQhB,U;;KAAAA,U;AAuET,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport BucketForm from './BucketForm';\nimport Bucket from './Bucket';\n\nfunction BucketList() {\n  const [bucket, setBucket] = useState([]);\n\n  // Function to add a bucket list item\n  const addBucketItem = (item) => {\n    console.log(\n      'ðŸš€ ~ file: BucketList.js ~ line 10 ~ addBucketItem ~ item',\n      item\n    );\n    // Check to see if the item text is empty\n    if (!item.text) {\n      return;\n    }\n\n    // Add the new bucket list item to the existing array of objects\n    const newBucket = [item, ...bucket];\n    console.log(newBucket);\n\n    // Call setBucket to update state with our new set of bucket list items\n    setBucket(newBucket);\n  };\n\n  // Function to mark bucket list item as complete\n  const completeBucketItem = (id) => {\n    // If the ID passed to this function matches the ID of the item that was clicked, mark it as complete\n    let updatedBucket = bucket.map((item) => {\n      if (item.id === id) {\n        item.isComplete = !item.isComplete;\n      }\n      return item;\n    });\n\n    console.log(updatedBucket);\n    setBucket(updatedBucket);\n  };\n\n  // Function to remove bucket list item and update state\n  const removeBucketItem = (id) => {\n    const updatedBucket = [...bucket].filter((item) => item.id !== id);\n\n    setBucket(updatedBucket);\n  };\n\n  // Function to edit the bucket list item\n  const editBucketItem = (itemId, newValue) => {\n    // Make sure that the value isn't empty\n    if (!newValue.text) {\n      return;\n    }\n\n    // We use the \"prev\" argument provided with the useState hook to map through our list of items\n    // We then check to see if the item ID matches the if of the item that was clicked and if so we set it to a new value\n    setBucket((prev) =>\n      prev.map((item) => (item.id === itemId ? newValue : item))\n    );\n  };\n\n  return (\n    <div>\n      <h1>What is on your bucket list?</h1>\n      <BucketForm onSubmit={addBucketItem} />\n      <Bucket\n        bucket={bucket}\n        completeBucketItem={completeBucketItem}\n        removeBucketItem={removeBucketItem}\n        editBucketItem={editBucketItem}\n      ></Bucket>\n    </div>\n  );\n}\n\nexport default BucketList;\n"]},"metadata":{},"sourceType":"module"}